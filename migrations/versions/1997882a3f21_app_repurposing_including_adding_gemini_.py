"""App repurposing including adding Gemini, labels, projects, and security fixes for Users and keys

Revision ID: 1997882a3f21
Revises: 3bc3f5b4267c
Create Date: 2025-06-02 19:31:04.543409

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1997882a3f21'
down_revision = '3bc3f5b4267c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('labels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('text', sa.String(length=100), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('refined_labels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('generated_text', sa.Text(), nullable=False),
    sa.Column('difficulty', sa.String(length=20), nullable=False),
    sa.Column('input_label_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['input_label_id'], ['labels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute('DROP TABLE IF EXISTS items_tags CASCADE')
    op.execute('DROP TABLE IF EXISTS tags CASCADE')
    op.execute('DROP TABLE IF EXISTS stores CASCADE')
    op.execute('DROP TABLE IF EXISTS items CASCADE')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('items',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('items_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('price', sa.REAL(), autoincrement=False, nullable=False),
    sa.Column('store_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], name='items_store_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='items_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('items_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], name=op.f('items_tags_item_id_fkey')),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('items_tags_tag_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('items_tags_pkey'))
    )
    op.create_table('stores',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stores_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='stores_pkey'),
    sa.UniqueConstraint('name', name='stores_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('store_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], name=op.f('tags_store_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('tags_pkey')),
    sa.UniqueConstraint('name', name=op.f('tags_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('refined_labels')
    op.drop_table('labels')
    op.drop_table('projects')
    # ### end Alembic commands ###
